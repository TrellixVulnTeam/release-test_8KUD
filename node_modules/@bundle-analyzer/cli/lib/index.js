"use strict";

var _commander = _interopRequireDefault(require("commander"));

var _core = require("@bundle-analyzer/core");

var _package = _interopRequireDefault(require("../package.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
_commander.default.version(_package.default.version).usage('[options] <stats>').option('--token <repository-token>', 'specify the repository token').option('--config-file <file>', 'specify a custom config file');

_commander.default.on('--help', () => {
  console.log(`
  Examples:
    webpack --json | bundle-analyzer --token "your-repository-token"
    cat webpack-stats.json | bundle-analyzer --token "your-repository-token"
`);
});

_commander.default.parse(process.argv);

async function readStdin() {
  return new Promise((resolve, reject) => {
    let stdin = '';
    process.stdin.setEncoding('utf8');
    process.stdin.on('readable', () => {
      const chunk = process.stdin.read();
      if (chunk !== null) stdin += chunk;
    });
    process.stdin.on('error', reject);
    process.stdin.on('end', () => resolve(stdin));
  });
}

async function run() {
  const rawStats = await readStdin();
  const stats = JSON.parse(rawStats);
  await (0, _core.uploadStats)({
    webpackStats: stats,
    token: _commander.default.token,
    configFile: _commander.default.configFile
  });
}

run().catch(error => {
  setTimeout(() => {
    throw error;
  });
});