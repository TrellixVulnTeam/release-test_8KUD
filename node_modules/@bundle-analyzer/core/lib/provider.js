"use strict";

exports.__esModule = true;
exports.detectProvider = detectProvider;

var _services = _interopRequireDefault(require("./services"));

var localGit = _interopRequireWildcard(require("./services/localGit"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
function detectProvider() {
  const service = _services.default.find(service => service.detect());

  if (service) {
    const config = service.config();
    return config;
  }

  const config = localGit.config();

  if (!config) {
    throw new Error('Unknown CI service provider. Unable to upload stats.');
  }

  return config;
}