/* eslint-disable @typescript-eslint/no-var-requires */
const path = require('path');
const babel = require('rollup-plugin-babel');
const resolve = require('rollup-plugin-node-resolve');
const commonjs = require('rollup-plugin-commonjs');
const replace = require('rollup-plugin-replace');
const json = require('@rollup/plugin-json');
const _ = require('lodash');
const fileSize = require('rollup-plugin-filesize');

const cwd = process.cwd();
const packageJsonPath = path.join(cwd, 'package.json');
const packageJson = require(packageJsonPath);

const extensions = ['.js', '.jsx', '.ts', '.tsx'];

const createConfig = ({ output, external = [], ci = false, input = 'src/index.js' }) => ({
  input,
  output: {
    ...output,
    manualChunks: (id) => {
      if (id.includes('__platform_sdk_config__')) {
        return '__platform_sdk_config__';
      }
      return null;
    },
  },
  external: (() => {
    // Exclude all specified externals, peerDependencies and Babel runtime imports.
    const peerIds = external.concat(Object.keys(packageJson.peerDependencies || {}));

    return (
      (id) => (
        !!peerIds.find(
          (peerId) => peerId === id || id.startsWith(`${peerId}/`),
        )
      ));
  })(),
  plugins: [
    resolve({
      preferBuiltins: ci,
      extensions,
    }),
    ci ? _.noop : babel({
      extensions,
      ...require('./babel.config'),
    }),
    commonjs(),
    replace({
      'PLATFORM.VERSION': JSON.stringify(packageJson.version),
      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
    }),
    json(),
    fileSize(),
  ],
});

module.exports = ({
  external = [], umd = false, ci = false, bundles = [],
} = {}) => {
  const esmOutput = !ci && {
    dir: 'packages/platform-sdk/dist/esm',
    format: 'esm',
    sourcemap: true,
    input: 'packages/platform-sdk/src/index.js',
  };

  const umdOutput = umd && {
    format: 'umd',
    name: umd,
    file: `../../build/${umd}.js`,
    sourcemap: true,
  };

  const commonjsOutput = ci && {
    dir: 'dist/commonjs',
    format: 'commonjs',
    sourcemap: false,
  };

  return [esmOutput, umdOutput, commonjsOutput, ...bundles]
    .filter(Boolean)
    .map(({ input, ...output }) => createConfig({ external, output, ci, input }));
};
