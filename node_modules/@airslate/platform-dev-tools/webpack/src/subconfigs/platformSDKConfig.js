/* eslint @typescript-eslint/no-var-requires: "off" */
const path = require('path');
const fs = require('fs');
const vm = require('vm');

const define = require('./define');

const configFileName = 'platform-sdk.config.js';

const cwd = process.cwd();
const configPath = path.join(cwd, configFileName);

module.exports = (options) => {
  if (!fs.existsSync(configPath)) {
    throw new Error(`[platform-dev-tools] "${configFileName}" doesn\'t exist in the root directory.`);
  }

  const configContent = fs.readFileSync(configPath).toString();
  const renderedConfigContent = Object
    .entries(define.createGlobalsDictionary(options))
    .reduce((acc, [key, value]) => acc.replace(key, value), configContent);

  const context = vm.createContext({
    module: {
      exports: null,
    },
  });
  const config = vm.runInContext(renderedConfigContent, context);

  return {
    module: {
      rules: [
        {
          test: /__platform_sdk_config__/,
          loader: 'string-replace-loader',
          options: {
            // Поиск инициализации дефолтного конфига и подмена его на "platform-sdk.config.js".
            search: /(\w+)\s*=\s*{}/,
            replace: (match, p1) => `${p1} = ${JSON.stringify(config)}`,
          },
        },
      ],
    },
  };
};
