/* eslint-disable @typescript-eslint/no-var-requires */
const webpack = require('webpack');
const path = require('path');
const TerserPlugin = require('terser-webpack-plugin');
const NodePolyfillPlugin = require('node-polyfill-webpack-plugin');
const { RetryChunkLoadPlugin } = require('webpack-retry-chunk-load-plugin');
const { NormalModuleReplacementPlugin } = require('webpack');

module.exports = () => ({
  optimization: {
    minimizer: [
      new TerserPlugin({
        parallel: true,
      }),
    ],

    // Include runtime chuck into platform
    runtimeChunk: false,
    usedExports: true,
    sideEffects: true,

    splitChunks: {
      chunks: 'all',
      maxAsyncRequests: 50,
      maxInitialRequests: 10,
      minSize: 0,
      cacheGroups: {
        commons: {
          test: (module) => {
            if (module.resource) {
              return module.resource.includes('node_modules') && !module.resource.includes('airslate-static.icons');
            }
            return false;
          },
          name(module, chunks, cacheGroupKey) { // add "cacheGroupKey" for uniq chunk name.
            const packagePath = module.context.split(`node_modules${path.sep}`)[1];

            if (packagePath[0] === '@') {
              const [nameSpace, name] = packagePath.replace('@', '').split(path.sep);
              return `${nameSpace}__${name}-${cacheGroupKey}`;
            }

            const [name] = packagePath.split(path.sep);
            return `${name}-${cacheGroupKey}`;
          },
        },
      },
    },
  },
  plugins: [
    new NodePolyfillPlugin(),
    new NormalModuleReplacementPlugin(/^lodash/, (result) => {
      // eslint-disable-next-line no-param-reassign
      result.request = result.request
        .replace('lodash.', 'lodash-es/')
        .replace('lodash/', 'lodash-es/');
    }),
    new RetryChunkLoadPlugin({
      maxRetries: 3,
    }),
    new webpack.ContextReplacementPlugin(/moment[/\\]locale$/, /en/),
  ],

  // Some libraries import Node modules but don't use them in the browser.
  // Tell Webpack to provide empty mocks for them so importing them works.
  // https://webpack.js.org/configuration/node/
  // https://github.com/webpack/node-libs-browser/tree/master/mock
  /*
   * Migrate rule (last point)
   * https://webpack.js.org/migrate/5/#clean-up-configuration
   */
  resolve: {
    fallback: {
      path: false,
      fs: false,
      net: false,
      tls: false,
      stream: require.resolve('stream-browserify'),
      crypto: require.resolve('crypto-browserify'),
      'crypto-browserify': require.resolve('crypto-browserify'),
      process: require.resolve('process'),
    },
  },
});
